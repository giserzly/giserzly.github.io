<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Geoserver（三 发布与服务）</title>
    <link href="/2022/07/05/Geoserver3/Geoserver3/"/>
    <url>/2022/07/05/Geoserver3/Geoserver3/</url>
    
    <content type="html"><![CDATA[<h3 id="一、发布Shapefile文件"><a href="#一、发布Shapefile文件" class="headerlink" title="一、发布Shapefile文件"></a>一、发布Shapefile文件</h3><span id="more"></span><h6 id="1-Shapefile实际上是文件的集合-shp、-dbf、-shx、-prj"><a href="#1-Shapefile实际上是文件的集合-shp、-dbf、-shx、-prj" class="headerlink" title="1. Shapefile实际上是文件的集合[.shp、.dbf、.shx、.prj]"></a>1. Shapefile实际上是文件的集合[.shp、.dbf、.shx、.prj]</h6><ul><li>同一个shapefile的文件最好放在同一个目录中</li><li>缺少.prj文件，Geoserver可能无法加载shapefile</li></ul><h6 id="2-创建工作区-空间-，以后的内容都可以在该工作-空间-中发布"><a href="#2-创建工作区-空间-，以后的内容都可以在该工作-空间-中发布" class="headerlink" title="2. 创建工作区(空间)，以后的内容都可以在该工作(空间)中发布"></a>2. 创建工作区(空间)，以后的内容都可以在该工作(空间)中发布</h6><h6 id="3-点击左侧-数据–-gt-数据存储-添加新的数据仓库"><a href="#3-点击左侧-数据–-gt-数据存储-添加新的数据仓库" class="headerlink" title="3. 点击左侧 数据–&gt;数据存储 添加新的数据仓库"></a>3. 点击左侧 数据–&gt;数据存储 添加新的数据仓库</h6><ol><li>新建数据源–&gt;矢量数据源–&gt;shapefile(.shp)文件</li><li>字符集<ul><li>英文：默认</li><li>中文: GBK </li><li><img src="/img/Geoserver3_2.png"></li></ul></li></ol><h6 id="4-发布"><a href="#4-发布" class="headerlink" title="4. 发布"></a>4. 发布</h6><ul><li><p>默认存储完直接跳转到发布</p></li><li><p>在图层中选择刚刚存储的图层点击发布</p></li></ul><h6 id="5-编辑发布的图层信息"><a href="#5-编辑发布的图层信息" class="headerlink" title="5. 编辑发布的图层信息"></a>5. 编辑发布的图层信息</h6><ul><li>关键字：提供快速索引</li><li> <img src="/img/Geoserver3_3.png"><h6 id="6-预览"><a href="#6-预览" class="headerlink" title="6. 预览"></a>6. 预览</h6></li><li>图层预览: OpenLayers</li></ul><h3 id="二、发布GeoTIFF-文件"><a href="#二、发布GeoTIFF-文件" class="headerlink" title="二、发布GeoTIFF 文件"></a>二、发布GeoTIFF 文件</h3><p> 与发布Shapefile文件类似</p><h3 id="三、发布PostGIS"><a href="#三、发布PostGIS" class="headerlink" title="三、发布PostGIS"></a>三、发布PostGIS</h3><h3 id="四、地图服务"><a href="#四、地图服务" class="headerlink" title="四、地图服务"></a>四、地图服务</h3><h4 id="0-Preface"><a href="#0-Preface" class="headerlink" title="0. Preface"></a>0. Preface</h4><ul><li><p>地理数据形式： 矢量、栅格</p></li><li><p>矢量(Vector)</p><ul><li><p>shp文件 ，核心：点坐标</p></li><li><p>在数据库中的存储形式：表</p></li><li><p>e.g. arcgis中矢量数据的属性表dbf</p></li><li><p>和前端的交互方式：</p><ol><li>json格式，地理数据常用Geojson格式<ul><li>GeoJSON的强大之处在于它可以作为一种数据格式媒介，和其它几种数据格式进行相互转化，他也可以直接和shape格式的文件做转化。非常方便。而且它保存的数据是完整的，数据体积也很小。</li></ul></li><li>xml格式，地理数据常用KML，GML格式</li></ol></li></ul></li><li><p>栅格(Grid)</p><ul><li><p>Grid、Rater、Tiff文件，类似图片。</p></li><li><p>可以概括为Image类型的</p></li></ul></li></ul><h4 id="1-WMS"><a href="#1-WMS" class="headerlink" title="1.WMS"></a>1.WMS</h4><ul><li><p>全称：Web Map Service  网络地图服务 <a href="https://docs.geoserver.org/stable/en/user/services/wms/index.html">官方文档</a></p></li><li><p>它是利用具有地理空间位置信息的数据制作地图，其中将地图定义为地理数据的可视化表现。WMS定义了一个规范的HTTP接口，支持标准HTTP协议的GET和POST请求，但多基于GET方式进行服务请求。能够根据用户请求返回相应的地图（包括<strong>PNG，GIF，JPEG</strong>等栅格形式或者是<strong>SVG和WEB CGM</strong>等矢量形式）。</p></li><li><p>WMS提供如下操作:</p><ol><li><p>GetCapabitities</p><p>返回服务级元数据，它是对服务信息内容和要求参数的一种描述。</p></li><li><p>GetMap</p><p>返回一个地图影像，其地理空间参考和大小参数是明确定义了的。</p></li><li><p>GetFeatureInfo</p><p>返回显示在地图上的某些特殊要素的信息。</p></li><li><p>GetLegendGraphic</p><p>返回地图的图例信息。</p></li></ol></li><li><p>简单概括：<strong>图片格式</strong>的地图被封装成了叫做WMS的服务。把你的数据源想方设法转化成一张和你数据源长得一样的图片。</p></li><li><p>但是无论怎么放大缩小，它就只是一张完整的图片。</p></li></ul><h4 id="2-WFS"><a href="#2-WFS" class="headerlink" title="2.WFS"></a>2.WFS</h4><ul><li><p>全称：Web Feature Service  Web矢量要素服务 <a href="https://docs.geoserver.org/stable/en/user/services/wfs/index.html">官方文档</a></p></li><li><p>矢量类型的数据源被封装成了WFS服务。服务返回矢量级的GML编码，可以对矢量进行增加、修改、删除等事务操作。</p></li><li><p>优点</p><ol><li>矢量图形不会随着放大程度的改变而失真，图片做不到。</li><li>.两要素方便与交互和编辑，修改形状等，这一点图片也做不到。</li></ol></li><li><p>WFS提供如下操作</p><ol><li>GetCapabilities<br> 获取WFS服务的元数据（介绍服务中的要素类和支持的操作）</li><li>DescribeFeatureType<br> 获取WFS服务支持的要素类的定义（要素类的元数据，比如要素包含哪些字段）</li><li>GetFeature<br> 获取要素数据</li><li>GetGmlObject<br> 通过XLink获取GML对象</li><li>Transaction<br> 创建、更新、删除要素数据的事务操作</li><li>LockFeature<br> 在事务过程中锁定要素。</li></ol></li></ul><h4 id="3-WCS"><a href="#3-WCS" class="headerlink" title="3.WCS"></a>3.WCS</h4><ul><li><p>全称：Web Coverage Service Web栅格服务 <a href="https://docs.geoserver.org/stable/en/user/services/wcs/index.html">官方文档</a></p></li><li><p>它将包含地理位置值的地理空间数据作为“<strong>栅格或者说“覆盖”（Coverage）</strong>”在网上相互交换。</p></li><li><p>WCS提供如下操作</p><ol><li><p>GetCapabilities</p><p>返回描述服务和数据集的XML文档。</p></li><li><p>GetCoverage</p><p>是在GetCapabilities确定什么样的查询可以执行、什么样的数据能够获取之后执行的，它使用通用的栅格格式返回地理位置的值或属性。</p></li><li><p>DescribeCoverageType</p><p>允许客户端请求由具体的WCS服务器提供的任一覆盖层的完全描述。</p></li></ol></li></ul><h4 id="4-TMS"><a href="#4-TMS" class="headerlink" title="4.TMS"></a>4.TMS</h4><ul><li>全称 ：Tile Map Service （OSGeo的）切片地图服务规范，提供的操作允许用户按需访问切片地图。将切片保存到了本地，使得访问速度更快，还支持修改坐标系，是一种纯RESTful的服务。</li><li>Tile（切片）思想<ul><li>使用瓦片地图时，我们看到的是一张铺满整个屏幕的大的地图图片。实际上，这张大的图片是多个尺寸相同（通常是256*256像素）的小图片按照既定规则无缝拼接而成的，这些小图片就是瓦片。瓦片按照如下图所示的金字塔结构组织，每张瓦片都可通过级别、行列号唯一标记。在平移地图、缩放地图时，浏览器根据金字塔规则，计算出所需的瓦片，从瓦片服务器获取并拼接。</li><li>由于瓦片是静态的图片，可预先生成，通过缓存和CDN技术，瓦片服务器可提供高效的瓦片读取服务。此外，浏览器并行获取和显示多张小图片，比获取和显示一张大图片要高效的多。显示地图变成和显示图片一样简单，这也是互联网地图能够承载亿级规模用户的原因。</li></ul></li></ul><h4 id="5-WMTS"><a href="#5-WMTS" class="headerlink" title="5.WMTS"></a>5.WMTS</h4><ul><li>全称：Web Map Tile Service Web地图瓦片服务</li><li>WMTS提供了一种采用<strong>预定义图块方法</strong>发布数字地图服务的标准化解决方案。</li><li>WMTS弥补了WMS不能提供分块地图的不足，在服务器端把地图切割为一定不同级别大小的瓦片（瓦片矩阵集合），对客户端预先提供这些预定义的瓦片，将更多的数据处理操作如叠加和切割等放在客户端，降低服务器端的载荷。</li><li>WMTS牺牲了提供定制地图的灵活性，代之以通过提供静态数据（基础地图）来增强伸缩性，这些静态数据的范围框和比例尺被限定在各个图块内。</li><li>这些固定的图块集使得对WMTS服务的实现可以使用一个仅简单返回已有文件的Web服务器即可，同时使得可以利用一些标准的诸如分布式缓存的网络机制实现伸缩性。</li><li>概括：WMTS比WMS 好的地方就是它能够加快加载速度，提升加载效率。可是它同时也失去了灵活性，你看的每一个区域都是被提前划分好的，限制在固定条带内的。</li><li>WMTS提供如下操作：<ol><li>GetCapabilities：获取WMTS的能力文档（即元数据文档），里面包含服务的所有信息</li><li>GetTile：获取地图瓦片。该操作根据客户端发出的请求参数在服务端进行检索，服务器端返回地图瓦片图像。</li><li>GetFeatureInfo：通过在WMTS图层上指定一定的条件，返回指定的地图瓦片内容对应的要素信息</li></ol></li></ul><h4 id="WMTS与TMS对比"><a href="#WMTS与TMS对比" class="headerlink" title="WMTS与TMS对比"></a>WMTS与TMS对比</h4><p><a href="https://blog.csdn.net/df1445/article/details/104997308">TMS和WMTS大概对比</a></p><h4 id="概括"><a href="#概括" class="headerlink" title="概括"></a>概括</h4><p>概括地来说：</p><ol><li>WMS：是一种<strong>动态地图</strong>服务，根据用户请求返回相应地图数据的可视化结果，实时切片，因此速度较慢。是GeoServer发布地图时较为常用的服务。</li><li>WMTS：是一种采用<strong>预定义图块方法</strong>发布数字地图服务，将地图切分成瓦片矩阵集合，牺牲了提供定制地图的灵活性，代之以通过提供静态数据（基础地图）来增强伸缩性，这些静态数据的范围框和比例尺被限定在各个图块内，但是提升了服务速度。例如我国的天地图就是使用这一服务进行组织的，详情见我另一篇博客：<a href="https://www.cnblogs.com/ssjxx98/p/10877692.html">关于天地图的瓦片下载</a>。</li><li>WFS：是为了返回<strong>纯地理数据</strong>而设计的，它不包含任何关于绘制数据的建议，它提供了对矢量的<strong>增加、修改、删除</strong>等事务操作。</li><li>WCS：是面向<strong>空间影像数据</strong>服务，它将包含地理位置值的地理空间数据作为“<strong>栅格或者说“覆盖”（Coverage）</strong>”在网上相互交换。</li><li>WPS：我理解的是一种提供和执行<strong>地理空间处理</strong>的服务，用于在web上发起空间运算操作。</li><li>WMSC：是一种预先缓存数据的方法，以提升地图请求的速度。目前已被WMTS和TMS取代。</li><li>TMS：也是一种瓦片地图服务，与WMTS类似，本质上遵循同样的切片规则。</li></ol><p><img src="/img/Geoserver3_1.png" alt="Relation"></p><h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><p><a href="https://zhuanlan.zhihu.com/p/398998331">几种互联网地图服务背后的解读(WMS，WFS，WMTS，TMS)</a></p><p><a href="https://blog.csdn.net/oYinHeZhiGuang/article/details/115731622">Web地图服务规范(WMS、WMTS、TMS)简析</a></p><p><a href="https://younghappy.blog.csdn.net/article/details/85630292?spm=1001.2101.3001.6650.4&utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-4-85630292-blog-112880522.pc_relevant_aa2&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-4-85630292-blog-112880522.pc_relevant_aa2&utm_relevant_index=9">常见地图服务：WMS,WMS-C,TMS,WMTS,WFS,WCS,WPS</a></p><p><a href="https://blog.csdn.net/Tmraz/article/details/108749365#:~:text=%E6%9C%8D%E5%8A%A1%E6%93%8D%E4%BD%9C%E5%88%97%E8%A1%A8,WMTS%E6%9C%8D%E5%8A%A1%E6%94%AF%E6%8C%81RESTful%E8%AE%BF%E9%97%AE%EF%BC%8C%E5%85%B6%E6%8E%A5%E5%8F%A3%E5%8C%85%E6%8B%ACGetCapabilities%E3%80%81GetTile%E5%92%8CGetFeatureInfo3%E4%B8%AA%E6%93%8D%E4%BD%9C%EF%BC%8C%E8%BF%99%E4%BA%9B%E6%93%8D%E4%BD%9C%E5%85%81%E8%AE%B8%E7%94%A8%E6%88%B7%E8%AE%BF%E9%97%AE%E5%88%87%E7%89%87%E5%9C%B0%E5%9B%BE%E3%80%82">WMS、WFS、WMTS服务接口说明</a></p><p><a href="https://www.cnblogs.com/ssjxx98/p/12531525.html">WMS、WFS、WCS、WPS、WMTS、WMSC、TMS等常见地图服务的区别</a></p><p><a href="https://blog.csdn.net/ranran_5300/article/details/50435086">WMS WFS WCS 的区别</a></p><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a>注意事项：</h3><ol><li><p>发布服务都是要在工作区里面的</p></li><li><p>基本流程</p><pre><code class=" mermaid">graph LR    准备好数据源 --&gt; 创建工作区--&gt; 创建数据存储 --&gt; 数据源发布图层 --&gt; 图层预览-客户端调用</code></pre></li></ol>]]></content>
    
    
    <categories>
      
      <category>Study</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WebGIS</tag>
      
      <tag>GeoServer</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Geoserver(二 入门)</title>
    <link href="/2022/07/05/Geoserver2/GeoServer2/"/>
    <url>/2022/07/05/Geoserver2/GeoServer2/</url>
    
    <content type="html"><![CDATA[<h3 id="一、从TomCat启动服务"><a href="#一、从TomCat启动服务" class="headerlink" title="一、从TomCat启动服务"></a>一、从TomCat启动服务</h3><span id="more"></span><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C">D:\\geo\\tomcat8\\bin <span class="hljs-comment">//文件夹</span><br>cmd<br>startup<br></code></pre></td></tr></table></figure><h5 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">UserName: admin<br>PassWord: geoserver<br></code></pre></td></tr></table></figure><h3 id="二、界面"><a href="#二、界面" class="headerlink" title="二、界面"></a>二、界面</h3>]]></content>
    
    
    <categories>
      
      <category>Study</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WebGIS</tag>
      
      <tag>GeoServer</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Geoserver(一 安装)</title>
    <link href="/2022/07/05/Geoserver/Geoserver/"/>
    <url>/2022/07/05/Geoserver/Geoserver/</url>
    
    <content type="html"><![CDATA[<h2 id=""><a href="#" class="headerlink" title=""></a></h2><h4 id="一、什么是GeoServer"><a href="#一、什么是GeoServer" class="headerlink" title="一、什么是GeoServer"></a>一、什么是GeoServer</h4><span id="more"></span><p>用于专门分享地理空间数据的开源服务器</p><h4 id="二、安装"><a href="#二、安装" class="headerlink" title="二、安装"></a>二、安装</h4><ol><li><p>安装环境需要Java 推荐安装JDK<br><a href="https://repo.huaweicloud.com/java/jdk/">华为JDK镜像</a></p></li><li><p>下载TomCat<br><a href="https://tomcat.apache.org/">TomCat官方网站 Apache Tomcat® - Welcome!</a></p><p>Tomcat简单的说就是一个运行JAVA的网络服务器，底层是Socket的一个程序，它也是JSP和Serlvet的一个容器。</p><ul><li><p>JSP(JavaServer Page)：JSP是一种Java servlet，主要用于实现Java web应用程序的用户界面部分。JSP通过网页表单获取用户输入数据、访问数据库及其他数据源，然后动态地创建网页。</p></li><li><p>Servlet: Java Servlet 是运行在 Web 服务器或应用服务器上的程序，它是作为来自 Web 浏览器或其他 HTTP 客户端的请求和 HTTP 服务器上的数据库或应用程序之间的中间层。</p><p>使用 Servlet，您可以收集来自网页表单的用户输入，呈现来自数据库或者其他源的记录，还可以动态创建网页。</p></li></ul><p><img src="/img/tomcat.jpg" alt="tomcat和servlet在网络中的位置"></p></li><li><p>下载Geoserver</p><p><a href="%5BGeoServer%5D(https://geoserver.org/)">GeoServer官方网站</a></p></li></ol><h4 id="三、配置"><a href="#三、配置" class="headerlink" title="三、配置"></a>三、配置</h4><ol><li>Java、TomCat、GeoServer的版本匹配问题  参考如下，三者的安装版本必须要匹配，不然容易出问题</li></ol><p><img src="/img/Geoserver_2.png" alt="Java JDK与Geoserver版本"></p><p><img src="/img/Geoserver_3.png" alt="TomCat版本"></p><ol start="2"><li><p>Java环境变量的配置 </p><ul><li>系统变量</li></ul><p><img src="/img/Geoserver_4.png" alt="系统变量"></p><ul><li>系统变量中Path</li></ul><p><img src="/img/Geoserver_5.png" alt="Path"></p></li><li><p>TomCat安装 </p><ul><li>一路Next</li></ul></li><li><p>GeoServer安装</p><ol><li> Windows installer.exe文件安装 （不推荐）</li><li>通过war包导入TomCat安装（推荐）<ul><li>将war包放入tomcat\webapp下</li><li>运行bin/startup.bat</li><li>内部网址:localhost:端口号/geoserver</li></ul></li></ol></li></ol><h4 id="四、遇到的问题"><a href="#四、遇到的问题" class="headerlink" title="四、遇到的问题"></a>四、遇到的问题</h4><ol><li><p>运行startup.bat程序秒退，服务不能成功启动</p><ul><li>解决方法<ul><li>检查环境变量是否配置好 控制台输入 java、Java -version、javac测试</li><li>检查Java JDK、TomCat、GeoServer版本是否对应  e.g. JDK8  TomCat8</li></ul></li></ul></li><li><p>运行startup.bat中文乱码问题</p><ul><li><p>windows下的cmd的默认编码是GBK编码，Tomcat控制台默认输出设置为UTF-8编码</p></li><li><p>解决方法</p><ul><li><p>（方式一）修改CMD命令行的编码格式为UTF-8</p></li><li><p>（方式二）将tomcat控制台日志输出编码格式更改为GBK，修改tomcat根目录下conf/logging.properties文件中的ConsoleHandler.encoding=utf-8，这种方式能解决cmd控制台中文乱码，但<code>不建议使用</code>。</p></li><li><p><strong>因为更改了tomcat默认编码，如果我们使用idea启动tomcat，idea的默认编码不是GBK，就会同样产生idea控制台下tomcat乱码问题</strong></p></li></ul></li></ul></li></ol>]]></content>
    
    
    <categories>
      
      <category>Study</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WebGIS</tag>
      
      <tag>GeoServer</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python 在GIS中的使用(一)</title>
    <link href="/2022/06/27/Python-in-GIS/index/"/>
    <url>/2022/06/27/Python-in-GIS/index/</url>
    
    <content type="html"><![CDATA[<h4 id="1-Preface"><a href="#1-Preface" class="headerlink" title="1.Preface"></a>1.Preface</h4><ul><li><p>Python之所以强大是因为能用（依赖）的库多罢了</p></li><li><p>但是较为繁琐的是环境的搭建、配置和维护</p><p><em><span id="more"></span></em></p><ul><li>使用初期 包、库的安装</li><li>库的更新、Python版本的更新也会带来问题<ul><li>新版本库不支持老Python</li><li>新版本Python不支持老库</li></ul></li><li>语法规范？感觉像是双刃剑<ul><li>写起来方便</li><li>有时候理解需要一点时间反应</li></ul></li><li>Python运行有时候还是比较慢的</li></ul></li><li><p>可能优点是？</p><ul><li>在Win和Mac双系统切换的时候，都能正常使用</li><li>不像某些专业软件比如ArcGIS只有Win版</li><li>有相同的安装环境就能跑</li><li>网上可复用的代码块较多、案例较多</li><li>弥补局限性，代码代替多次操作，Arcpy代替ModelBuilder</li></ul></li></ul><h4 id="2-有关环境"><a href="#2-有关环境" class="headerlink" title="2.有关环境"></a>2.有关环境</h4><h5 id="1-使用工具"><a href="#1-使用工具" class="headerlink" title="1.使用工具"></a>1.使用工具</h5><ul><li>Anacoda3 2022.5 MacOSX</li><li>Spyder 5.1.5</li><li>Python 3.8.13</li></ul><h5 id="2-配置流程"><a href="#2-配置流程" class="headerlink" title="2.配置流程"></a>2.配置流程</h5><ul><li><p>安装Anaconda <a href="https://www.anaconda.com/">官网下载</a></p></li><li><p>Environments中配置自己的编程环境  OSGIS</p><ul><li>Create 创建环境</li><li>Import 导入环境</li><li>Backup 备份环境</li></ul></li><li><p>安装库</p><ul><li><p>方法1: 环境下利用终端  conda install 或者 pip install </p><ul><li>优点 直接 </li><li>缺点 非可视化</li></ul></li><li><p>方法2: 更新Channels 从 conda Channels中导入</p><ul><li><p>问题:文件夹写入权限问题</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C">NotWritableError: The current user does not have write permissions to a required path.<br></code></pre></td></tr></table></figure><p>解决方法：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C">cd /users/o1/opt   <span class="hljs-comment">//操作opt文件夹下的anaconda3</span><br>sū<span class="hljs-keyword">do</span> chown -R o1 anaconda3 <span class="hljs-comment">//赋予权限</span><br></code></pre></td></tr></table></figure></li><li><p>更新具体Channels</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs C">conda config --get channels <span class="hljs-comment">//获取当前环境OSGIS下Channels</span><br>conda config --add channels conda-forge <span class="hljs-comment">//有强大的社区支持，提供了大多数安装包，并且更新及时</span><br>conda config --remove-key channels <span class="hljs-comment">//删除Channel</span><br>conda config --add channels https:<span class="hljs-comment">//mirrors.ustc.edu.cn/anaconda/pkgs/main/</span><br>conda config --add channels https:<span class="hljs-comment">//mirrors.ustc.edu.cn/anaconda/pkgs/free/</span><br>conda config --add channels https:<span class="hljs-comment">//mirrors.bfsu.edu.cn/anaconda/cloud/pytorch/</span><br>pip config <span class="hljs-built_in">set</span> global.index-url https:<span class="hljs-comment">//mirrors.ustc.edu.cn/pypi/web/simple</span><br>conda config --<span class="hljs-built_in">set</span> show_channel_urls yes<br><span class="hljs-meta"># activate my environment</span><br>conda activate OSGIS<br><span class="hljs-meta"># update all packages <span class="hljs-keyword">if</span> needed</span><br>conda update --all<br><span class="hljs-meta"># set channel priority as strict 设置优先级</span><br>conda config --<span class="hljs-built_in">set</span> channel_priority strict<br></code></pre></td></tr></table></figure></li></ul></li><li><p>常见的库 </p><ul><li>numpy</li><li>GDAL</li></ul></li></ul></li></ul><h4 id="3-基本流程"><a href="#3-基本流程" class="headerlink" title="3. 基本流程"></a>3. 基本流程</h4><p>读取、处理、写入(更新)</p>]]></content>
    
    
    <categories>
      
      <category>Study</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>GIS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HEXO设置</title>
    <link href="/2022/06/26/HEXO%E8%AE%BE%E7%BD%AE/index/"/>
    <url>/2022/06/26/HEXO%E8%AE%BE%E7%BD%AE/index/</url>
    
    <content type="html"><![CDATA[<h4 id="1-背景设置"><a href="#1-背景设置" class="headerlink" title="1.背景设置"></a>1.背景设置</h4><span id="more"></span><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">https:<span class="hljs-comment">//blog.csdn.net/weixin_43828250/article/details/114379300</span><br></code></pre></td></tr></table></figure><h4 id="2-图片插入的包"><a href="#2-图片插入的包" class="headerlink" title="2.图片插入的包"></a>2.图片插入的包</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c">npm install hexo-image-link --save<br>npm uninstall hexo-renderer-marker --save  #卸载 marked<br>npm install hexo-renderer-markdown-it --save  #安装markdown-it<br>https:<span class="hljs-comment">//blog.csdn.net/rentonhe/article/details/123666769</span><br></code></pre></td></tr></table></figure><p>或者直接使用 </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C">&#123;% asset_img example.png This is an example image %&#125; <br></code></pre></td></tr></table></figure><ul><li>example.jpg放在同目录下同名资源文件夹中</li><li>见<a href="https://www.freesion.com/article/9410594097/">HEXO基本操作</a><!--more--></li></ul><h4 id="3-设置Padding、Margin等"><a href="#3-设置Padding、Margin等" class="headerlink" title="3.设置Padding、Margin等"></a>3.设置Padding、Margin等</h4><ul><li>在浏览器中查看Layout和对应的代码块</li><li>到CSS文件中找</li></ul><h4 id="4-关于本地端口占用"><a href="#4-关于本地端口占用" class="headerlink" title="4.关于本地端口占用"></a>4.关于本地端口占用</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c">Error: listen EADDRINUSE: address already in use :::<span class="hljs-number">4000</span><br>sudo lsof -i:端口号<br>sudo kill <span class="hljs-number">-9</span> pid<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Blog</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>对象、Web API</title>
    <link href="/2022/06/26/%E5%AF%B9%E8%B1%A1%E3%80%81Web-API/index/"/>
    <url>/2022/06/26/%E5%AF%B9%E8%B1%A1%E3%80%81Web-API/index/</url>
    
    <content type="html"><![CDATA[<h3 id="对象、Web-API"><a href="#对象、Web-API" class="headerlink" title="对象、Web API"></a>对象、Web API</h3><h4 id="1-对象"><a href="#1-对象" class="headerlink" title="1. 对象"></a>1. 对象</h4><h6 id="构造"><a href="#构造" class="headerlink" title="构造"></a>构造</h6><span id="more"></span><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> obj = &#123;&#125;;<span class="hljs-comment">//空对象</span><br><span class="hljs-keyword">let</span> obj = &#123;<br>    <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;01&#x27;</span>,<br>    <span class="hljs-attr">age</span>:<span class="hljs-number">22</span>,<br>    <span class="hljs-attr">sayHi</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Hi~&#x27;</span>);<br>    &#125;<br>&#125;<span class="hljs-comment">//名称，年龄，匿名函数,属性逗号隔开</span><br><br><span class="hljs-comment">//第二种方法 Object</span><br><span class="hljs-keyword">let</span> obj = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br>obj.<span class="hljs-property">name</span> = <span class="hljs-string">&#x27;01&#x27;</span>;<br>obj.<span class="hljs-property">age</span> = <span class="hljs-number">18</span>;<br>obj.<span class="hljs-property">sayHi</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;SayHi&#x27;</span>);<br>&#125;<br><span class="hljs-comment">//第三种方法 构造函数 对象里一些相同的属性和方法抽象出来封装到函数里</span><br><span class="hljs-keyword">function</span> 构造函数名(参数)&#123;    <br>    <span class="hljs-variable language_">this</span>.属性 = 参数；<br>    <span class="hljs-variable language_">this</span>.方法 = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">let</span> sth = <span class="hljs-keyword">new</span> 构造函数名(参数) <br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(sth.属性)<br><span class="hljs-comment">////构造函数名首字母要大写、用构造函数必须要new、属性和方法之前必须使用this</span><br><br></code></pre></td></tr></table></figure><h6 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj.<span class="hljs-property">uname</span>)<span class="hljs-comment">//对象.属性名</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj[<span class="hljs-string">&#x27;age&#x27;</span>])<span class="hljs-comment">//对象[&#x27;属性名&#x27;]</span><br>obj.<span class="hljs-title function_">sayHi</span>() <span class="hljs-comment">//对象名.方法名</span><br><span class="hljs-comment">//遍历属性</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> 对象)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(key)<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(对象[key])<span class="hljs-comment">//输出属性值</span><br>&#125;<br></code></pre></td></tr></table></figure><h6 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h6><p>1.Math<br>2.Date<br>3.String<br>4.Array</p><h6 id="甄别"><a href="#甄别" class="headerlink" title="甄别"></a>甄别</h6><ol><li><p>函数和方法： 都是实现某种功能，在外面的叫函数，在对象里面的叫方法</p></li><li><p>构造函数和对象</p><p>构造函数是泛指的某一大类</p><p>对象是一个具体的事物，是构造函数的实例化</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><br></code></pre></td></tr></table></figure><h4 id="2-Web-API"><a href="#2-Web-API" class="headerlink" title="2. Web API"></a>2. Web API</h4><p>应用程序编程接口，实现页面交互功能</p></li></ol><ul><li>BOM 浏览器功能 交互效果<ul><li>alert</li></ul></li><li>DOM树  页面元素<ul><li>文档页面从上往下加载 得现有标签，script脚本写在标签下</li></ul></li></ul><h5 id="1-DOM"><a href="#1-DOM" class="headerlink" title="1.DOM"></a>1.DOM</h5><h6 id="获取元素"><a href="#获取元素" class="headerlink" title="获取元素"></a>获取元素</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>() <span class="hljs-comment">//返回的是一个元素对象Object</span><br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByTagName</span>()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Study</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Javascript</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
